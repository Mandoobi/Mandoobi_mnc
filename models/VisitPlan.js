const mongoose = require('mongoose');

const visitDaySchema = new mongoose.Schema({
  day: {
    type: String,
    enum: ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
    required: true
  },
  customers: [
    {
      customerId: { type: mongoose.Schema.Types.ObjectId, ref: 'Customer', required: true },
      fullName: { type: String, required: true }
    }
  ]
}, { _id: false });

const visitPlanSchema = new mongoose.Schema({
  repId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    index: true,
  },
  companyId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Company',
    required: true,
    index: true,
  },
  days: {
    type: [visitDaySchema],
    validate: {
      validator: function (days) {
        const daysSet = new Set(days.map(d => d.day));
        if (daysSet.size !== days.length) return false; // ØªÙƒØ±Ø§Ø± ÙŠÙˆÙ…
        const allowedDays = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];
        for (const day of daysSet) {
          if (!allowedDays.includes(day)) return false;
        }
        return true;
      },
      message: 'ðŸ›‘ Ø£ÙŠØ§Ù… Ø§Ù„Ø²ÙŠØ§Ø±Ø§Øª ÙŠØ¬Ø¨ Ø£Ù† ØªÙƒÙˆÙ† Ù…Ù† Ø§Ù„Ø£Ø­Ø¯ Ø¥Ù„Ù‰ Ø§Ù„Ø³Ø¨Øª ÙˆØ¨Ø¯ÙˆÙ† ØªÙƒØ±Ø§Ø±'
    }
  }
}, { timestamps: true });

// Ø¶Ù…Ø§Ù† ÙˆØ¬ÙˆØ¯ Ø®Ø·Ø© ÙˆØ§Ø­Ø¯Ø© Ù„ÙƒÙ„ Ù…Ù†Ø¯ÙˆØ¨ Ø¶Ù…Ù† Ø´Ø±ÙƒØ© ÙˆØ§Ø­Ø¯Ø©
visitPlanSchema.index({ repId: 1, companyId: 1 }, { unique: true });

module.exports = mongoose.model('VisitPlan', visitPlanSchema);
